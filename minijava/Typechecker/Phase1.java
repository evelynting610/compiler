/* This file was generated by the Amherst version of SableCC */

package minijava.Typechecker;

import minijava.node.*;
import minijava.Temp.Label;
import minijava.Type.*;

import java.util.*;

public class Phase1
{
	Typechecker typechecker;
	
	public Phase1(Typechecker t) {
		typechecker =t;
	}

    void process(Node n) {
    	 throw new RuntimeException(this.getClass() + ": no process method available for " 
	     + n.getClass());
    }

    ///////////////////////////////////////////////////////////////
    void process(Start n) {
         process(n.getPProgram());
    }

    ///////////////////////////////////////////////////////////////
    void process(PProgram n) {
        process((AProgram)n);
    }

    ///////////////////////////////////////////////////////////////
    void process(AProgram n) {
        n.getId();				// yields TId
	for (PMaindecl p : n.getMaindecl())
	    process(p);				// process(PMaindecl)
    }

    ///////////////////////////////////////////////////////////////
    void process(PMaindecl n) {
        if (n instanceof AVarMaindecl) process((AVarMaindecl)n);
	else if (n instanceof AMethodMaindecl) process((AMethodMaindecl)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PMaindecl)");

       
    }

    /////////////////////////////////////////////////////////////// 
    void process(AVarMaindecl n) {
        //process(n.getPrivacy());			// process(PPrivacy)
    	String name = n.getId().getText();
        Type nType = process(n.getType());			// process(PType)
        Token token = n.getId();				// yields TId
        typechecker.createClassVar(name, nType, token);
    }

    ///////////////////////////////////////////////////////////////
    void process(AMethodMaindecl n) {
        //process(n.getPrivacy());			// process(PPrivacy)
        //n.getStatic();				// yields TStatic
        String name = n.getId().getText();
        Type nType = process(n.getType());			// process(PType)
        List<Type> params = process(n.getParamlist());			// process(PParamlist)
        
        Token token = n.getId();				// yields TId
        typechecker.createMethod(name, nType, params, token);
        
        //n.getLparen();				// yields TLparen
        //n.getRparen();				// yields TRparen
        //n.getLbrace();				// yields TLbrace
    }

    ///////////////////////////////////////////////////////////////
    List<Type> process(PParamlist n) {
        if (n instanceof AListParamlist) return process((AListParamlist)n);
	else if (n instanceof AEmptyParamlist) return process((AEmptyParamlist)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PParamlist)");

    }

    ///////////////////////////////////////////////////////////////
    List<Type> process(AListParamlist n) {
    	List<Type> paramList = new LinkedList<Type>();
        paramList.add(process(n.getType()));			// process(PType)
        //n.getId();				// yields TId
	for (PParam p : n.getParam())
	    paramList.add(process(p));				// process(PParam)

        return paramList;
    }

    ///////////////////////////////////////////////////////////////
    List<Type> process(AEmptyParamlist n) {
        return new LinkedList<Type>();
    }

    ///////////////////////////////////////////////////////////////
    Type process(PParam n) {
        return process((AParam)n);
    }

    ///////////////////////////////////////////////////////////////
    Type process(AParam n) {
        //n.getComma();				// yields TComma
        return process(n.getType());			// process(PType)
        //n.getId();				// yields TId

    }

    Type process(PType n) {
        return process((AType)n);
    }

    ///////////////////////////////////////////////////////////////
    Type process(AType n) {
        Type nType = typechecker.getType(n.getId());  //n.getID() yields TId
	for (PEmptydim p : n.getEmptydim()){  
		nType = typechecker.makeArrayType(nType, n.getId());
	    //process(p);				// process(PEmptydim)
	}
        return nType;    // remove when method is complete
    }

    ///////////////////////////////////////////////////////////////
    /*
    //void process(PStmt n) 
	

    ///////////////////////////////////////////////////////////////
    //void process(AWhileStmt n) 

    ///////////////////////////////////////////////////////////////
    //void process(ADeclStmt n) 
    ///////////////////////////////////////////////////////////////
    //void process(ABlockStmt n) 
       

    ///////////////////////////////////////////////////////////////
    //void process(AIfStmt n) 
       

    ///////////////////////////////////////////////////////////////
    //void process(AExprStmt n) 

    ///////////////////////////////////////////////////////////////
    //void process(AReturnStmt n) 
       

    ///////////////////////////////////////////////////////////////
    //void process(APrintStmt n) 
    ///////////////////////////////////////////////////////////////
    //void process(AEmptyStmt n) 

    ///////////////////////////////////////////////////////////////
    //void process(PExpr n) {
        
   

    ///////////////////////////////////////////////////////////////
    //String process(AAssignExpr n) 

    ///////////////////////////////////////////////////////////////
    //void process(AExprExpr n) 

    ///////////////////////////////////////////////////////////////
    //void process(PExpr10 n) 

    ///////////////////////////////////////////////////////////////
    //void process(AOrExpr10 n) 

    ///////////////////////////////////////////////////////////////
    //void process(AExprExpr10 n) 

    ///////////////////////////////////////////////////////////////
    //void process(PExpr20 n) 

    ///////////////////////////////////////////////////////////////
    //void process(AAndExpr20 n) 
    ///////////////////////////////////////////////////////////////
    //void process(AExprExpr20 n) 

    ///////////////////////////////////////////////////////////////
    //void process(PExpr30 n) 

    ///////////////////////////////////////////////////////////////
    //void process(AEqExpr30 n) 

    ///////////////////////////////////////////////////////////////
    //void process(ANeExpr30 n)

    ///////////////////////////////////////////////////////////////
    //void process(AExprExpr30 n) 

    ///////////////////////////////////////////////////////////////
    //void process(PExpr40 n)

    ///////////////////////////////////////////////////////////////
   // void process(ALtExpr40 n) 

    ///////////////////////////////////////////////////////////////
    //void process(ALeExpr40 n)

    ///////////////////////////////////////////////////////////////
    //void process(AGeExpr40 n) 

    ///////////////////////////////////////////////////////////////
    //void process(AGtExpr40 n)

    ///////////////////////////////////////////////////////////////
    //void process(AExprExpr40 n) 

    ///////////////////////////////////////////////////////////////
    //void process(PExpr50 n) }

    ///////////////////////////////////////////////////////////////
    //void process(APlusExpr50 n) 
    ///////////////////////////////////////////////////////////////
    //void process(AMinusExpr50 n) 

    ///////////////////////////////////////////////////////////////
    //void process(ATermExpr50 n) 
    ///////////////////////////////////////////////////////////////
    //void process(PTerm n) 

    ///////////////////////////////////////////////////////////////
    //void process(ATimesTerm n) 

    ///////////////////////////////////////////////////////////////
   // void process(ADivTerm n) 

    ///////////////////////////////////////////////////////////////
    //void process(AModTerm n)

    ///////////////////////////////////////////////////////////////
    //void process(AFactorTerm n) 

    ///////////////////////////////////////////////////////////////
    //void process(PFactor n)  }

    ///////////////////////////////////////////////////////////////
    //void process(APrimaryFactor n) 

    ///////////////////////////////////////////////////////////////
    //void process(AIdFactor n) 

    ///////////////////////////////////////////////////////////////
    //void process(ALengthFactor n) {
        

    ///////////////////////////////////////////////////////////////
    //void process(ALength2Factor n) {
        
    ///////////////////////////////////////////////////////////////
    //void process(PPrimary n) {
        

    ///////////////////////////////////////////////////////////////
    //void process(ANewarrayPrimary n) {
       

    ///////////////////////////////////////////////////////////////
    //void process(APrimary2Primary n) {
        
    ///////////////////////////////////////////////////////////////
    //void process(PPrimary2 n) {
      

    ///////////////////////////////////////////////////////////////
    //void process(AIconstPrimary2 n) {
    

    ///////////////////////////////////////////////////////////////
    //void process(ASconstPrimary2 n) {
        

    ///////////////////////////////////////////////////////////////
    //void process(ANullPrimary2 n) {
       

    ///////////////////////////////////////////////////////////////
    //void process(ATruePrimary2 n) {
        

    ///////////////////////////////////////////////////////////////
    //void process(AFalsePrimary2 n) {
        

    ///////////////////////////////////////////////////////////////
    //void process(AParensPrimary2 n) 

    ///////////////////////////////////////////////////////////////
    //void process(ACallPrimary2 n) 

    ///////////////////////////////////////////////////////////////
    //void process(AArrayrefPrimary2 n) 
    ///////////////////////////////////////////////////////////////
    //void process(PArrayref n) 
       

    ///////////////////////////////////////////////////////////////
    //void process(ANameArrayref n) 
    ///////////////////////////////////////////////////////////////
    //void process(APrimaryArrayref n) 

    ///////////////////////////////////////////////////////////////
    
    /*void process(PLhs n) {
        if (n instanceof AIdLhs) process((AIdLhs)n);
	else if (n instanceof AArrayrefLhs) process((AArrayrefLhs)n);
	else 
            throw new RuntimeException (this.getClass() + 
                ": unexpected subclass " + n.getClass() + " in process(PLhs)");

        throw new UnsupportedOperationException ();     // remove when method is complete
    }

    ///////////////////////////////////////////////////////////////
    void process(AIdLhs n) {
        n.getId();				// yields TId

        throw new UnsupportedOperationException ();     // remove when method is complete
    }

    ///////////////////////////////////////////////////////////////
    void process(AArrayrefLhs n) {
        process(n.getArrayref());			// process(PArrayref)

        throw new UnsupportedOperationException ();     // remove when method is complete
    }

    ///////////////////////////////////////////////////////////////
    void process(PArglist n) {
        process((AListArglist)n);
        throw new UnsupportedOperationException ();
    }
    */
    ///////////////////////////////////////////////////////////////
    //void process(AListArglist n) {

    ///////////////////////////////////////////////////////////////
    //void process(PArg n)

    ///////////////////////////////////////////////////////////////
    //void process(AArg n)

    ///////////////////////////////////////////////////////////////
    void process(PEmptydim n) {
        process((AEmptydim)n);
    }

    ///////////////////////////////////////////////////////////////
    void process(AEmptydim n) {
        n.getLbrack();				// yields TLbrack
        n.getRbrack();				// yields TRbracks
    }

}
